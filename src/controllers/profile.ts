import User from "#/models/User";
import { RequestHandler } from "express";
import { isValidObjectId, ObjectId, PipelineStage } from "mongoose";
import { paginationQuery } from "../@types/misc";
import CardsCollection, {
  CardsCollectionDocument,
} from "#/models/cardsCollection";
import playlist from "#/models/playlist";
import History from "#/models/history";
import moment from "moment";
import { getUserPreviousHistory } from "#/utils/helper";
import AutoGeneratedPlaylist from "#/models/autoGeneratedPlaylist";

export const updateFollower: RequestHandler = async (req, res) => {
  const { profileId } = req.params;

  let status: "added" | "removed";

  if (!isValidObjectId(profileId)) {
    res.status(422).json({
      error: "invalid profile id",
      message: "profile id is invalid",
    });
    return;
  }
  const profile = await User.findById(profileId);
  if (!profile) {
    res.status(404).json({
      error: "profile not found!",
      message: "profile not found!",
    });
    return;
  }

  const alreadyAFollower = await User.findOne({
    _id: profileId,
    followers: req.user.id,
  });
  if (alreadyAFollower) {
    await User.updateOne(
      {
        _id: profileId,
      },
      {
        $pull: { followers: req.user.id },
      }
    );
    status = "removed";
  } else {
    await User.updateOne(
      {
        _id: profileId,
      },
      {
        $addToSet: { followers: req.user.id },
      }
    );
    status = "added";
  }

  if (status === "added") {
    // update the following list (add)
    await User.updateOne(
      {
        _id: req.user.id,
      },
      {
        $addToSet: { followings: profileId },
      }
    );
  }
  if (status === "removed") {
    // remove the following list (add)
    await User.updateOne(
      {
        _id: req.user.id,
      },
      {
        $pull: { followings: profileId },
      }
    );
  }
  res.json({ status });
};
export const getUploads: RequestHandler = async (req, res) => {
  const { limit = "20", pageNo = "0" } = req.query as paginationQuery;
  const data = await CardsCollection.find({ owner: req.user.id })
    .skip(parseInt(limit) * parseInt(pageNo))
    .limit(parseInt(limit))
    .sort("-createdAt");
  const cardsCollection = data.map((item) => {
    return {
      id: item._id,
      title: item.title,
      description: item.description,
      poster: item.poster?.url,
      date: item.createdAt,
      owner: {
        name: req.user.name,
        id: req.user.id,
      },
    };
  });
  res.json({ cardsCollection });
};
export const getPublicUploads: RequestHandler = async (req, res) => {
  const { limit = "20", pageNo = "0" } = req.query as paginationQuery;
  const { profileId } = req.params;
  if (!isValidObjectId(profileId)) {
    res.status(422).json({
      error: "invalid profile id ",
      message: "profile id not valid ",
    });
    return;
  }
  const data = await CardsCollection.find({ owner: profileId })
    .skip(parseInt(limit) * parseInt(pageNo))
    .limit(parseInt(limit))
    .sort("-createdAt")
    .populate<CardsCollectionDocument<{ name: string; _id: ObjectId }>>(
      "owner"
    );
  const cardsCollection = data.map((item) => {
    return {
      id: item._id,
      title: item.title,
      description: item.description,
      poster: item.poster?.url,
      date: item.createdAt,
      owner: {
        name: item.owner.name,
        id: item.owner._id,
      },
    };
  });
  res.json({ cardsCollection });
};
export const getPublicProfile: RequestHandler = async (req, res) => {
  const { profileId } = req.params;

  if (!isValidObjectId(profileId)) {
    res.status(422).json({
      error: "invalid profile id ",
      message: "profile id is invalid",
    });
    return;
  }
  const user = await User.findById(profileId);
  if (!user) {
    res.status(422).json({
      error: "user not found ",
      message: "user not found ",
    });
    return;
  }
  res.json({
    profile: {
      id: user._id,
      name: user.name,
      followers: user.followers.length,
      avatar: user.avatar?.url,
    },
  });
};

export const getPublicPlaylist: RequestHandler = async (req, res) => {
  const { profileId } = req.params;
  const { limit = "20", pageNo = "0" } = req.query as paginationQuery;

  if (!isValidObjectId(profileId)) {
    res.status(422).json({
      error: "invalid profile id ",
      message: "profile id is invalid",
    });
    return;
  }
  const Playlist = await playlist
    .find({
      owner: profileId,
      visibility: "public",
    })
    .skip(parseInt(limit) * parseInt(pageNo))
    .limit(parseInt(limit))
    .sort("-createdAt");

  if (!Playlist) {
    res.status(200).json([]);
    return;
  }
  res.json({
    playlist: Playlist.map((item) => {
      return {
        id: item._id,
        title: item.title,
        itemsCount: item.items.length,
        visibility: item.visibility,
      };
    }),
  });
};
export const getRecommendedByProfile: RequestHandler = async (req, res) => {
  const user = req.user;
  let matchOPtions: PipelineStage.Match = { $match: { owner: user.id } };

  if (user) {
    const category = await getUserPreviousHistory(req);

    if (category?.length) {
      matchOPtions = { $match: { category: { $in: category } } };
    }
  }

  const collection = await CardsCollection.aggregate([
    matchOPtions,
    {
      $sort: {
        "likes.count": -1,
      },
    },
    {
      $limit: 10,
    },
    {
      $lookup: {
        from: "users",
        localField: "owner",
        foreignField: "_id",
        as: "owner",
      },
    },
    {
      $unwind: "$owner",
    },
    {
      $project: {
        _id: 0,
        id: "$_id",
        title: "$title",
        category: "$category",
        description: "$description",
        poster: "$poster.url",
        owner: {
          name: "$owner.name",
          id: "$owner._id",
          avatar: "$owner.avatar.url",
        },
      },
    },
  ]);
  res.json({ collection });
};

export const getAutoGeneratedPlaylist: RequestHandler = async (req, res) => {
  // /1 mix 20
  const [result] = await History.aggregate([
    { $match: { owner: req.user.id } },
    { $unwind: "$all" },
    {
      $group: {
        _id: "$all.cardsCollection",
        items: { $addToSet: "$all.cardsCollection" },
      },
    },
    { $sample: { size: 20 } },
    { $group: { _id: null, items: { $push: "$_id" } } },
  ]);
  const title = "MIX 20";
  if (result) {
    await playlist.updateOne(
      { owner: req.user.id, title: title },
      {
        $set: { title, items: result.items, visibility: "auto" },
      },
      { upsert: true }
    );
  }

  // 4 autogenerate playlist
  const category = await getUserPreviousHistory(req);
  let matchOPtions: PipelineStage.Match = {
    $match: { _id: { $exists: true } },
  };

  if (category.length) {
    matchOPtions = { $match: { title: { $in: category } } };
  }
  // const find = await AutoGeneratedPlaylist.find();
  const agpl = await AutoGeneratedPlaylist.aggregate([
    matchOPtions,
    { $sample: { size: 4 } },
    {
      $project: {
        _id: 0,
        id: "$_id",
        title: "$title",
        itemsCount: { $size: "$items" },
      },
    },
  ]);

  const MPlaylist = await playlist.findOne({
    owner: req.user.id,
    title,
  });

  const finalList = agpl.concat({
    id: MPlaylist?._id,
    title: MPlaylist?.title,
    itemsCount: MPlaylist?.items.length,
  });
  res.json({ playlist: finalList });
};

export const getFollowersProfile: RequestHandler = async (req, res) => {
  const { limit = "20", pageNo = "0" } = req.query as paginationQuery;

  const result = await User.aggregate([{ $match: { _id: req.user.id } }]);
  res.json({ result });
};
